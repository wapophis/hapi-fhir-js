{"version":3,"sources":["../../../src/spi/dataTypes/HumanDt.js"],"names":["HumanNameDt","root","use","text","family","given","prefix","suffix","period","isEmpty","newVal","push","oVal","String","myUse","NameUseEnum","getByValue","newValue","myText","myFamily","myGiven","Array","isArray","myPrefix","mySuffix","myPeriod","PeriodDt","Object"],"mappings":"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","sourcesContent":["import {isUndefined,isValid,isEmptyArray,isEmpty} from '../utils/ValidationRules.js';\nimport PeriodDt from './PeriodDt.js';\nimport NameUseEnum from '../valueSets/NameUseEnum.js';\n\nexport const HumanNameDt= class HumanNameDt extends Object{\n    constructor(root){\n        super();\n        if(isValid(root)){\n            this.use=root.use;\n            this.text=root.text;\n            this.family=root.family;\n            this.given=root.given;\n            this.prefix=root.prefix;\n            this.suffix=root.suffix;\n            this.period=root.period;\n        }\n    }\n    \n    get use(){\n        if(!isValid(this.myUse)){\n            this.myUse=new String();\n        }\n        return NameUseEnum.getByValue(this.myUse);\n    }\n\n    set use(newValue){\n        this.myUse=newValue;\n        return this;\n    }\n\n    get text(){\n        if(!isValid(this.myText)){\n            this.myText=new String();\n        }\n\n        return this.myText;\n\n    }\n\n    set text(newValue){\n        this.myText=newValue;\n        return this;\n    }\n\n    get family(){\n        if(!isValid(this.myFamily)){\n            this.myFamily=new String();\n        }\n\n        return this.myFamily;\n\n    }\n\n    set family(newValue){\n        this.myFamily=newValue;\n        return this;\n    }\n\n    get given(){\n        if(!isValid(this.myGiven) && Array.isArray(this.myGiven)){\n            this.myGiven=new Array();\n        }\n        return this.myGiven;\n    }\n\n    set given(newValue){\n        this.myGiven=newValue;\n        return this;\n    }\n\n    get prefix(){\n        if(!isValid(this.myPrefix)){\n            this.myPrefix=new Array();\n        }\n\n        return this.myPrefix;\n\n    }\n\n    set prefix(newValue){\n        this.myPrefix=newValue;\n        return this;\n    }\n\n    get suffix(){\n        if(!isValid(this.mySuffix)){\n            this.mySuffix=new Array();\n        }\n\n        return this.mySuffix;\n\n    }\n\n    set suffix(newValue){\n        this.mySuffix=newValue;\n        return this;\n    }\n\n    get period(){\n        if(!isValid(this.myPeriod)){\n            this.myPeriod=new PeriodDt();\n        }\n\n        return this.myPeriod;\n    }\n\n    set period(newValue){\n        this.myPeriod=newValue;\n        return this;\n    }\n\n    isEmpty(){\n        return isEmptyArray(this.given) \n                && isEmptyArray(this.prefix) \n                && isEmptyArray(this.suffix)\n                && isEmpty(this.family)\n                && isEmpty(this.text)\n                && this.period.isEmpty();\n    }\n\n\n    /**\n     * Adds an returns a new value for family if newVal undefined,\n     * Adds an returns this if newValue is defined\n     */\n    addFamily(newVal){\n        if(isValid(newVal)){\n            this.family.push(newVal);\n            return this;\n        }else{\n            let oVal=new String();\n            this.family.push(oVal);\n            return oVal;\n        }\n    }\n\n    /**\n     * Adds a given new value for family.\n     * @param {*} newVal \n     */\n    addGiven(newVal){\n        if(isValid(newVal)){\n            this.given.push(newVal);\n            return this;\n        }else{\n            let oVal=new String();\n            this.given.push(oVal);\n            return oVal;\n        }\n    }\n\n\n\n    /**\n     * \n     * @param {*} newVal \n     */\n    addPrefix(newVal){\n        if(isValid(newVal)){\n            this.prefix.push(newVal);\n            return this;\n        }else{\n            let oVal=new String();\n            this.prefix.push(oVal);\n            return oVal;\n        }\n    }\n\n\n    /**\n     * \n     * @param {*} newVal \n     */\n    addSuffix(newVal){\n        if(isValid(newVal)){\n            this.suffix.push(newVal);\n            return this;\n        }else{\n            let oVal=new String();\n            this.suffix.push(oVal);\n            return oVal;\n        }\n    }\n\n    /**\n     * Return first element for family array;\n     */\n    getFamilyFirstRep(){\n        return this.family[0];\n    }\n\n    /**\n     * Return first element for given array.\n     */\n    getGivenFirstRep(){\n        return this.given[0];\n    }\n\n    /**\n     * Return first element for suffix array.\n     */\n    getSuffixFirstRep(){\n        return this.suffix[0];\n    }\n\n    /**\n     * Return first element for prefix array.\n     */\n    getPreffixFirstRep(){\n        return this.prefix[0];\n    }\n\n\n\n}"],"file":"HumanDt.js"}